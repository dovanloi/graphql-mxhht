# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    me: User!
    post(id: ID!): Post!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    createGroup(data: CreateGrouptInput!): Group!
    joinGroup(idGroup: ID!): Menber!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    phone: String
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreatePostInput {
    title: String!
    message: String!
    is_published: Boolean!
    link: String
    parent_id: String
    privacy: String
    status_type: Int!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

input CreateGrouptInput {
    name: String!
    cover: String
    description: String
    email: String
    icon: String
    privacy: Int
}

type User {
  id: ID! 
  name: String!
  username: String
  email: String! 
  password: String!
  phone: String 
  posts: [Post!]! 
  friends: [Friend!]! 
  friendsto: [Friend!]! 
  menbers: [Menber!]! 
  folows: [FolowPage!]! 
  comments: [Comment!]! 
  exercises: [Exercise!]!
  tasks: [Task!]! 
  updatedAt: String!
  createdAt: String!
}

type Friend{
  me: User!
  to: User! 
  folow: Boolean
  status: Int
  updatedAt: String!
  createdAt: String!
}

type Menber {
  user: User! 
  group: Group! 
  admin_only: Boolean
  status: Int
  updatedAt: String!
  createdAt: String!
}

type Group {
  id: ID! 
  name: String!
  cover: String
  description: String
  email: String
  icon: String
  privacy: Int
  menbers: [Menber!]! 
  notifications: [Notification!]! 
  exercises: [Exercise!]! 
  tasks: [Task!]! 
  updatedAt: String!
  createdAt: String!
}

type Notification {
  id: ID! 
  group: Group!
  title: String!
  body: String!
  Time: String
  updatedAt: String!
  createdAt: String!
}

type Exercise{
  id: ID! 
  group: Group! 
  title: String!
  description: String
  body: String!
  arrangement: Boolean
  quantity_max: Int
  time: Int
  start_time: String!
  end_time: String!
  creat_admin: User! 
  tasks: [Task!]! 
  updatedAt: String!
  createdAt: String!
}

type Task {
  id: ID! 
  group: Group! 
  creat_admin: User! 
  exercise: Exercise! 
  body: String
  point: Float
  updatedAt: String!
  createdAt: String!
}

type Page {
  id: ID!
  about: String
  name: String!
  phone: String
  email: String
  questionGroups: [QuestionGroup!]! 
  topicGroups: [TopicGroup!]! 
  folows: [FolowPage!]! 
  can_post: Boolean
  pagetype: String
  updatedAt: String!
  createdAt: String!
}

type FolowPage {
  user: User! 
  page: Page! 
  admin_only: Boolean
  status: Int
  updatedAt: String!
  createdAt: String!
}
type QuestionGroup {
  id: ID! 
  name: String!
  description: String
  page: Page! 
  questions: [Question!]! 
  updatedAt: String!
  createdAt: String!
}

type Question {
  id: ID! 
  content: String!
  type: String
  questiongroup: QuestionGroup! 
  updatedAt: String!
  createdAt: String!
}

type TopicGroup {
  id: ID! 
  name: String!
  description: String
  page: Page! 
  topics: [Topic!]! 
  updatedAt: String!
  createdAt: String!
}

type Topic {
  id: ID! 
  name: String!
  description: String
  topicGroup: TopicGroup! 
  body: String
  status: Boolean
  updatedAt: String!
  createdAt: String!
}

type Post {
  id: ID! 
  title: String!
  message: String!
  is_published: Boolean!
  link: String
  parent_id: String
  privacy: String
  status_type: Int!
  author: User! 
  comments: [Comment!]! 
  updatedAt: String!
  createdAt: String!
}

type Comment {
  id: ID! 
  text: String!
  author: User! 
  post: Post!
  updatedAt: String!
  createdAt: String!
}
enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}